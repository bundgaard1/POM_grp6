class Controller_2

instance variables

    public ctl_angle : real;       -- angle of arm in radians
    public ctl_angle_vel : real;
    public ctl_angle_acc : real;

    public ctl_angle_target : real;  -- taget angel of the arm in radians 
   
    Kp : real; -- Proportional factor 
    Kd : real; -- derivative factor 
   
    e_last : real;  -- error at last control

    public state_history : seq of (real * real); --time * ctl_angle 

values 

    N1 : real = 0;    -- minimum limit for target
    N2 : real = 1.57; -- maximum limit for target

    I : real = 0.1;     -- Inertia of robot arm should be calculated: I = m*r^2
    m : real = 0.1;     -- Mass 
    r : real = 1;       -- Length

operations

    public Controller_2: () ==> Controller_2
    Controller_2() == (
        ctl_angle := 0;
        ctl_angle_vel := 0;
        ctl_angle_acc := 0;
        ctl_angle_target := ctl_angle;
        e_last := 0;

        Kp := 1;
        Kd := 1;

        state_history := []

    );

    public setTarget : (real) ==> ()
    setTarget(new_target) == duration(1E7)(

        if N1 < new_target and new_target < N2 then
            ctl_angle_target := new_target;
    );

    public monitorArmAngle : () ==> ()
    monitorArmAngle() == duration(1E7)(
   
        ctl_angle := System_2`angle_sensor.getArmAngle();
    );


    public controlTheMotor : () ==> ()
    controlTheMotor() == duration(1E7)(
        dcl e : real;
        dcl t_motor1 : real;
        dcl de : real;       
        dcl t_motor2 : real;

        -- PD controller

        e := ctl_angle_target - ctl_angle;  -- error from e(t_i) 
        
        -- Proportional
        t_motor1 := Kp * e;

        -- Derivative
        de := e - e_last;           -- change of error    
        t_motor2 := Kd * de;

        -- Set Tourqe on world
        System_2`motor.setTorque(t_motor1 + t_motor2);

        e_last := e;
    );

    public loop : () ==> ()
    loop() == (
        monitorArmAngle();
        controlTheMotor();
    );


    public setKd : (real) ==> ()
    setKd(newKd) == duration(0)(
        Kd := newKd;
    );

    public setKp : (real) ==> ()
    setKp(newKp) == duration(0)(
        Kp := newKp;
    );
thread
    periodic(1E8,0,0,0)(loop);

end Controller_2