class World_2

instance variables
    io : IO := new IO();
    curr_time: real := 0;

operations

    public UpdateTimeStamp : () ==> () 
    UpdateTimeStamp() == duration(0) (
        curr_time := time / 1E9;
    );

    public scenario0 :() ==> bool 
    scenario0() == (
        echoState();    
        return true;
    );

    public scenario1 : () ==> ()
    scenario1() == (

        System_2`env.setFinalSimTime(3E9);

        System_2`controller.setTarget(1);
        System_2`controller.setKd(3);
        System_2`controller.setKp(0.1);

        start(System_2`controller);
        start(System_2`angle_sensor);
        start(System_2`motor);

        System_2`env.isFinished();

        StateToFile('1');

        return;
    );

    public scenario2 : () ==> ()
    scenario2() == (

        System_2`env.setFinalSimTime(10E9);

        System_2`controller.setTarget(1);
        System_2`controller.setKd(2);
        System_2`controller.setKp(0.5);

        start(System_2`controller);
        start(System_2`angle_sensor);
        start(System_2`motor);

        System_2`env.isFinished();

        StateToFile('2');

        return;
    );


    public scenario3 : () ==> ()
    scenario3() == (

        System_2`env.setFinalSimTime(10E9);
        System_2`env.env_angle := 0.5;
        System_2`controller.setTarget(0);
        System_2`controller.setKd(2);
        System_2`controller.setKp(0);

        start(System_2`controller);
        start(System_2`angle_sensor);
        start(System_2`motor);

        System_2`env.isFinished();

        StateToFile('3');

        return;
    );

    public stateString : () ==> seq of char
    stateString() == (
        dcl str : seq of char := "";
        str := str ^ VDMUtil`val2seq_of_char[real](time); -- time
        str := str ^ " ";
        str := str ^ VDMUtil`val2seq_of_char[real](System_2`controller.ctl_angle); -- controller angle
        str := str ^ " ";
        str := str ^ VDMUtil`val2seq_of_char[real](System_2`controller.ctl_angle_target); -- next controller angle
        str := str ^ " ";
        str := str ^ VDMUtil`val2seq_of_char[real](System_2`env.env_angle); -- arm angle
        str := str ^ " ";
        str := str ^ VDMUtil`val2seq_of_char[real](System_2`env.env_angle_vel); -- arm velocity
        str := str ^ " ";
        str := str ^ VDMUtil`val2seq_of_char[real](System_2`motor.mtr_torque); -- motor torque
        str := str ^ "\n";
        return str
    );

    public state_history_to_string : (seq of (real * real * real)) ==> seq of char
    state_history_to_string(history) == (
        dcl str : seq of char := "";
        for mk_(t, q, v) in history do (
                str := str ^ VDMUtil`val2seq_of_char[real](t); -- time
                str := str ^ " ";
                str := str ^ VDMUtil`val2seq_of_char[real](q);
                str := str ^ " ";
                str := str ^ VDMUtil`val2seq_of_char[real](v); -- time
                str := str ^ "\n";
            );
        return str
    );
    
    public echoState : () ==> ()
    echoState() == (
        dcl succ : bool;
        dcl str : seq of char := stateString();
        succ := io.echo(str); 
    );

    public StateToFile : (char)  ==> ()
    StateToFile(scenario) == (
        dcl succ : bool;
        dcl str : seq of char := state_history_to_string(System_2`env.state_history);
        succ := io.fecho("../senarios/" ^ [scenario] ^ ".txt",str,<start>); 
    );

end World_2