class Motor_22

instance variables
    public last_time : real;
    public torque_motor : real;
    public motor_failed : bool;

    public state_history : seq of (real * real * real * real); -- time * torque:motor * tourque_grav * torque_fric 

values
    I : real = 0.1;
    m : real = 0.1;
    g : real = 1;
    r : real = 1; -- 1 meter

    F_c : real = 0.03;
    F_v : real = 0.01;

operations
    public Motor_22: () ==> Motor_22
    Motor_22() == (
        motor_failed := false;
        last_time := 0;
        torque_motor := 0;
        state_history := [];
    );
    
    public step: () ==> ()
    step() == duration(0)(
        dcl q_acc : real;
        dcl q_vel : real;
        dcl prev_angle_vel : real;
        dcl prev_angle : real;
        dcl new_angle : real;
        dcl dt : real;
        dcl torque_gravity : real;
        dcl torque_friction : real;

        dt := time/1E9 - last_time;
        last_time := time/1E9;

        prev_angle := System_22`env.getArmAngle();

        prev_angle_vel := System_22`env.getArmVel();

        torque_gravity := - m * g * r * MATH`cos(prev_angle);
        torque_friction := F_c * MATH`atan(prev_angle_vel) + F_v * prev_angle_vel;

        q_acc := (torque_motor + torque_gravity - torque_friction) / I;
        
        q_vel := prev_angle_vel + q_acc * dt;

        new_angle := prev_angle + q_vel * dt;
        
        System_22`env.adjustArmAngle(new_angle - prev_angle);

        state_history := state_history ^ [mk_(time/1E9, torque_motor, torque_gravity, torque_friction)];
    );

    public setTorque: (real) ==> ()
    setTorque(givenTorque) == duration(0)(

        if motor_failed then (
            torque_motor := 0;
            return;
        );

        torque_motor := givenTorque;
    );

thread
    periodic(2E7,0,0,0)(step);

end Motor_22